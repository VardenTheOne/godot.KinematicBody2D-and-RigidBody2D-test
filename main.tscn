[gd_scene load_steps=10 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D


const xmin = 200
const xmax = 800
var x = 200
var dir = 1
var velocity
var accel_coeff = 0
var timer = 6
var cicle = 12
var use_move_and_slide = true


func _physics_process(delta):
	timer += delta
	if timer > cicle:
		timer -= cicle
	var xsin = xmin + (xmax - xmin)/2  + (xmax - xmin) * cos(timer/(cicle/2) * PI) / 2
	timer -= cicle/4 * 3
	
	var xtriangle = xmin + (xmax - xmin)/2 + ((2 * ((xmax - xmin)/2)) / PI) * asin(sin(((2 * PI) / (cicle)) * timer))
	if use_move_and_slide:
		move_and_slide(Vector2((xsin * (1 - accel_coeff)) + (xtriangle * accel_coeff) - position.x, 0))
	else:
		position.x = (xsin * (1 - accel_coeff)) + (xtriangle * accel_coeff)
		
	timer += cicle/4 * 3


func _on_Acceleration_value_changed(value):
	accel_coeff = value


func _on_Speed_value_changed(value):
	cicle = value


func _on_CheckButton_toggled(button_pressed):
	use_move_and_slide = button_pressed
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 100, 20 )

[sub_resource type="NoiseTexture" id=3]
width = 200
height = 40

[sub_resource type="PhysicsMaterial" id=4]
rough = true

[sub_resource type="GDScript" id=5]
script/source = "extends RigidBody2D


var force = Vector2(0,0)
const maxforce = 200
var should_reset = false


func _physics_process(delta):
	force = Vector2(0,0)
	
	if Input.is_action_pressed(\"ui_right\"):
		force.x += maxforce * delta
	if Input.is_action_pressed(\"ui_left\"):
		force.x -= maxforce * delta
	if Input.is_action_pressed(\"ui_up\"):
		force.y -= maxforce * delta
	if Input.is_action_pressed(\"ui_down\"):
		force.y += maxforce * delta
	
	apply_central_impulse(force)


func _on_Friction_value_changed(value):
	physics_material_override.friction = value


func _on_Respawn_pressed():
	should_reset = true


func _integrate_forces(state):
	if should_reset:
		state.transform = Transform2D(0, Vector2(300, 300))
		state.linear_velocity = Vector2(0, 0)
		state.angular_velocity = 0
		should_reset = false
"

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 25, 25 )

[sub_resource type="QuadMesh" id=7]
size = Vector2( 50, 50 )

[sub_resource type="GDScript" id=8]
script/source = "extends Label


func _on_Friction_value_changed(value):
	text = \"friction = \" + str(value)
"

[sub_resource type="GDScript" id=9]
script/source = "extends Label


func _on_Speed_value_changed(value):
	text = \"Cicle time = \" + str(value) + \" sec\"
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="platform" type="KinematicBody2D" parent="."]
position = Vector2( 200, 500 )
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="platform"]
shape = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="platform"]
texture = SubResource( 3 )

[node name="RigidBody2D" type="RigidBody2D" parent="."]
position = Vector2( 300, 300 )
physics_material_override = SubResource( 4 )
can_sleep = false
script = SubResource( 5 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="RigidBody2D"]
shape = SubResource( 6 )

[node name="MeshInstance2D" type="MeshInstance2D" parent="RigidBody2D"]
mesh = SubResource( 7 )

[node name="VBoxContainer" type="VBoxContainer" parent="."]
margin_right = 40.0
margin_bottom = 40.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="VBoxContainer"]
margin_right = 218.0
margin_bottom = 14.0
text = "Use arrows to apply force to circle"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Friction" type="HSlider" parent="VBoxContainer"]
margin_top = 18.0
margin_right = 218.0
margin_bottom = 34.0
focus_mode = 0
max_value = 1.5
step = 0.1
value = 1.0
scrollable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FrictionLabel" type="Label" parent="VBoxContainer/Friction"]
margin_right = 218.0
margin_bottom = 14.0
text = "friction = 1"
align = 1
script = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Acceleration" type="HSlider" parent="VBoxContainer"]
margin_top = 38.0
margin_right = 218.0
margin_bottom = 54.0
focus_mode = 0
max_value = 1.0
step = 0.01
scrollable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AccelerationLabel" type="Label" parent="VBoxContainer/Acceleration"]
margin_right = 218.0
margin_bottom = 14.0
text = "fluent                          sharp"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Speed" type="HSlider" parent="VBoxContainer"]
margin_top = 58.0
margin_right = 218.0
margin_bottom = 74.0
focus_mode = 0
min_value = 5.0
max_value = 20.0
step = 0.1
value = 12.0
scrollable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="SpeedLabel" type="Label" parent="VBoxContainer/Speed"]
margin_right = 218.0
margin_bottom = 14.0
text = "Cicle time = 12 sec"
align = 1
script = SubResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CheckButton" type="CheckButton" parent="VBoxContainer"]
margin_top = 78.0
margin_right = 218.0
margin_bottom = 118.0
focus_mode = 0
pressed = true
enabled_focus_mode = 0
text = "use move and slide"

[node name="Respawn" type="Button" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -100.0
margin_bottom = 50.0
text = "Respawn"
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="value_changed" from="VBoxContainer/Friction" to="VBoxContainer/Friction/FrictionLabel" method="_on_Friction_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Friction" to="RigidBody2D" method="_on_Friction_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Acceleration" to="platform" method="_on_Acceleration_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Speed" to="VBoxContainer/Speed/SpeedLabel" method="_on_Speed_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Speed" to="platform" method="_on_Speed_value_changed"]
[connection signal="toggled" from="VBoxContainer/CheckButton" to="platform" method="_on_CheckButton_toggled"]
[connection signal="pressed" from="Respawn" to="RigidBody2D" method="_on_Respawn_pressed"]
